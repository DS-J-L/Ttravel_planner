from fastapi import APIRouter, HTTPException
from ..components.user_data import UserData
from modules.llm_request import request_to_llm
from modules.get_pois_from_map import get_pois_from_map
from modules.save_as import save_as
from uuid import uuid4
import json

router = APIRouter()

# ---- Helper to get filter from llm ----

def get_filter_from_llm(user_data: dict) -> dict:
    # this will be tested after get_pois_from_map completed
    return None

    """
    Generates a Foursquare-compatible filter using LLM based on user preferences.

    :param user_data: Dictionary of user input preferences.
    :return: Dictionary containing filter parameters for Foursquare API.
    """

    # Construct readable user profile
    user_profile = (
        f"User is planning a trip to {user_data.get('location')}.\n"
        f"Travel dates: {user_data.get('duration', {}).get('start')} to {user_data.get('duration', {}).get('end')}.\n"
        f"Companions: {user_data.get('companions')}.\n"
        f"Travel concept or theme: {user_data.get('concept')}.\n"
        f"Additional requests: {user_data.get('extra_request')}\n"
    )

    # Instruction to GPT to create a filter
    instruction = (
        "Based on the user's travel profile below, generate a JSON object for querying the Foursquare API.\n"
        "The filter should help extract 50–70 Points of Interest (POIs) that align with the user's interests.\n"
        "Return only a JSON object with keys like 'categories', 'radius', 'keywords', and any relevant filters.\n"
        "Make sure the format is valid JSON and contains only filter information—no explanation.\n"
    )

    query = instruction + "\nUser Profile:\n" + user_profile

    # Send to GPT
    response = request_to_llm(query)

    # Parse response to dict
    try:
        result = json.loads(response)
        return result
    except json.JSONDecodeError:
        raise ValueError("GPT returned an invalid JSON response for filters.")


# ---- Helper to save pois ----
def save_pois(poi_list):
    filename = f"pois_{uuid4().hex}.csv"
    save_as(poi_list, filename, format="csv")
    return filename
    '''
        Overview of flow to use redis
        1. FrontEnd (map_loading.jsx) sends user input -> backend
        2. Backend (api/get_pois)
            - generate session_id
            - gets pois generated by llm and map api
            - saves pois to redis under session_id
            - returns session_id and pois to frontend
        3. FrontEnd stores session_id and uses it later
        4. BackEnd (api/route_optim) uses session_id to retreives POIs from redis

        <code>
        from modules.redis_client import save_pois_to_redis

        session_id = str(uuid.uuid4())
        save_pois_to_redis(session_id, pois_list)
        return session_id
    '''


@router.post("/api/get_pois")
async def get_pois(user_data: UserData):
    try:
        filter_data = user_data.kwargs.filter

        # Step 2: If no filter, call LLM to generate it
        if not filter_data:
            filter_data = get_filter_from_llm(user_data.dict())
            user_data.kwargs.filter = filter_data

        # Step 3: Fetch POIs based on filter
        poi_list = get_pois_from_map(filter_data, user_data.location)

        # Step 4: Save to CSV
        user_data.kwargs.poi_file_loc = save_pois(poi_list)

        # Step 5: Return result
        return {
            "user_data": user_data.dict()
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
